alias awsacctalias="aws iam list-account-aliases | jq -r \".AccountAliases[0]\""
alias awsgetcaller="aws sts get-caller-identity"
alias awsgetacct="aws sts get-caller-identity --query 'Account' --output text"
alias awsunsetcreds="unset AWS_SHARED_CREDENTIALS_FILE"
alias awscheckcreds="printenv | grep AWS_SHARED_CREDENTIALS_FILE"
alias awsunsetprofile="unset AWS_PROFILE"
alias awscheckprofile="printenv | grep AWS_PROFILE"
alias awscheck="printenv | grep AWS_"
alias awswhoami="aws iam list-account-aliases | jq -r \".AccountAliases[0]\";aws sts get-caller-identity"
alias awscfnhelper="bash $UTILITY_SCRIPTS_REPO/cloudformation/cfnhelper.sh"

# Use the  amazon/aws-cli docker container to replace installing the cli:
# - https://hub.docker.com/r/amazon/aws-cli
# - https://github.com/aws/aws-cli/blob/v2/docker/Dockerfile
# alias aws='docker run --rm -ti -v ~/.aws:/root/.aws -v $(pwd):/aws amazon/aws-cli'

function awsextractcreds {
  unset AWS_PROFILE
  unset AWS_SHARED_CREDENTIALS_FILE
  if [ "" == "$1" ]; then
    echo "Passing the profile to extract credentials for is required!"
  else
    local ACCESS_KEY="$(aws configure get aws_access_key_id --profile $1 )"
    if [ "The config profile ($1) could not be found" == "$ACCESS_KEY" ]; then
      echo "$ACCESS_KEY"
    else
      touch awscreds
      echo "[default]">awscreds
      echo "aws_access_key_id=$(aws configure get $1.aws_access_key_id)">>awscreds
      echo "aws_secret_access_key=$(aws configure get $1.aws_secret_access_key)">>awscreds
      echo "aws_session_token=$(aws configure get $1.aws_session_token)">>awscreds
    fi
  fi
}

function awscmd {
  local AWCCLI_COMMAND
  local AWCCLI_RESPONSE="$($AWCCLI_COMMAND 2>&1 || true)"
  if [[ "$AWCCLI_RESPONSE" == *'An error occurred'* ]]; then
    log "ERROR: $AWCCLI_RESPONSE"
    exit 1
  else
    echo "Implement me to pass a call but wrap with exception handling!!"
    log "$AWCCLI_RESPONSE"
  fi
}




function awssetcreds {
    export AWS_SHARED_CREDENTIALS_FILE="$1"
}

function awssetprofile {
    export AWS_PROFILE="$1"
}

function awssetregion {
    export AWS_REGION="$1"
}

function awssetdefault {
    export AWS_DEFAULT_REGION="us-east-1"
    export AWS_PAGER=""
}

function awsunset {
  #https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
  unset AWS_DEFAULT_REGION
  unset AWS_DEFAULT_OUTPUT
  unset AWS_DEFAULT_PROFILE
  unset AWS_CA_BUNDLE
  unset AWS_SHARED_CREDENTIALS_FILE
  unset AWS_CONFIG_FILE
  #https://docs.aws.amazon.com/cli/latest/topic/config-vars.html
  unset AWS_PROFILE
  unset AWS_METADATA_SERVICE_TIMEOUT
  unset AWS_METADATA_SERVICE_NUM_ATTEMPTS
  #I think this is remanant of usage thart was supposed to be looking at AWS_DEFAULT_REGION yet here it lives on :(
  unset AWS_REGION
}

#Install SSM Manager plugin
# Reference: https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html
#            https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-prereqs.html
# curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/mac/sessionmanager-bundle.zip" -o "sessionmanager-bundle.zip"
# unzip sessionmanager-bundle.zip
# sudo ./sessionmanager-bundle/install -i /usr/local/sessionmanagerplugin -b /usr/local/bin/session-manager-plugin
# #Output should match: "The Session Manager plugin is installed successfully. Use the AWS CLI to start a session."
# session-manager-plugin
function awsssmto {
  local sts_output=$(aws sts get-caller-identity | jq -r '.Arn')
  echo "Using AWS Credentials: $sts_output"
  echo " "
  echo "Searching for instancewith '$1' in the name..."
  # local target="$(aws ec2 describe-instances --filters "Name=tag:Name,Values=*$1*" --region "$AWS_REGION")"
  local target="$(aws ec2 describe-instances --filters "Name=tag:Name,Values=*$1*")"
  local target_name="$(echo $target| jq -r '.Reservations[0].Instances[]|.Tags[]|select(.Key=="Name")|.Value')"
  target_id="$(echo $target| jq -r '.Reservations[0].Instances[]|.InstanceId')"
  echo "Connection to instance via ssm: [$target_name] - [$target_id]"
  # aws ssm start-session --target "$target_id" --region "$AWS_REGION"
  aws ssm start-session --target "$target_id"
}

function awsssminventory {
  echo "============================================================"
  local sts_output=$(aws sts get-caller-identity | jq -r '.Arn')
  echo "Using AWS Credentials: $sts_output"
  echo " "
  echo "Show SSM Ec2 Instance Inventory:"
  echo " "
  local result_size="100"

  # NOTE: Here we want to use the pagination api and build the full list before moving on to gettign the ec2 information

  # local instance_ids=($(aws ssm get-inventory | jq -r '.Entities[] | .Data | ."AWS:InstanceInformation" | .Content[] | select(.InstanceStatus!="Terminated") | .InstanceId'))
  local instance_ids=($(aws ssm get-inventory | jq -r '.Entities[] | .Data | ."AWS:InstanceInformation" | .Content[] | select(.InstanceStatus!="Terminated") | "\(.InstanceId)|\(.IpAddress)"'))
  # local instance_ids=($(aws ssm get-inventory --max-items "$result_size" --page-size" $result_size" | jq -r '.Entities[] | .Data | ."AWS:InstanceInformation" | .Content[] | select(.InstanceStatus!="Terminated") | .InstanceId'))

  local instance_ids_spaced_list=''
  for id in ${instance_ids[@]}
  do
    echo "${id}"
    instance_ids_spaced_list="$instance_ids_spaced_list${id%[|]*} "
  done
  # local describe_output="$(aws ec2 describe-instances --instance-ids $instance_ids_spaced_list)"
  local describe_output="$(aws ec2 describe-instances  --instance-ids $instance_ids_spaced_list --query 'Reservations[*].Instances[*].[InstanceId,ImageId,PrivateIpAddress,Tags[?Key==`Name`].Value]')"
  # echo "$describe_output" | jq -r '.Reservations[] | .Instances[] | .Tags[] | select(.Key=="Name") | .Value'
  # echo "$describe_output" | jq -r '.Reservations[] | .Instances[] | select(.Tags[].Key=="Name") | "\( select(.Tags[] | .Key=="Name" ).Value)|\(.InstanceId)|\(.PrivateIpAddress)|\(.PrivateIpAddress)"'
  # echo "$describe_output" | jq -r '.Reservations[] | .Instances[] | select(.Tags[].Key=="Name") | select(.Tags[].Key | contains("Name")) | .Value'
  # echo "$describe_output" | jq -r '.Reservations[] | .Instances[] | select(.Tags[].Key=="Name") | select(.Tags[].Key | contains("Name"))'

  # echo "$describe_output"
  echo "$describe_output" |  jq -r '.[] | .[] | "\(.[0])|\(.[1])|\(.[2])|\(.[3]|.[0])"'

  echo "============================================================"
}

function awsgetinstancedata {
  aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,ImageId,Tags[?Key==`Name`].Value]' | jq -r '.[] | .[] | "\(.[0])|\(.[1])|\(.[2]|.[0])"' | grep $1
}

function awsacctnumberfromarn {
  if [ "" != "$1" ]; then
    echo "$1" | awk -F':' '{print $5}'
  fi
}

function awsfindsecret {
  if [ "" == "$1" ]; then
    echo "Passing a string to match the secret name against is required!"
  else
    local SECRET_ARN="$(aws secretsmanager list-secrets --query "SecretList[?Name | contains(@,'$1')].ARN" --output text 2>&1 || true)"
    echo "Found secret for: [$1]"
    echo " "
    echo "$SECRET_ARN"
    echo " "
    echo "To look up the secret value use:"
    echo " aws secretsmanager get-secret-value --secret-id $SECRET_ARN"
  fi
}

function awslistcfn {
  local STACK_NAMES="$(aws cloudformation describe-stacks --query "Stacks[*].StackName" --output text)"
  for STACK_NAME in ${STACK_NAMES[@]}
  do
    echo "$STACK_NAME"
  done
}

function awsfindcfn {
  if [ "" == "$1" ]; then
    echo "Passing a string to match the cloudformation stack name against is required!"
  else
    aws cloudformation describe-stacks --query "Stacks[?StackName | contains(@,'$1')].StackName" --output text
  fi
}

function awss3countobjects {
  if [ "" == "$1" ]; then
    echo "Passing the s3 bucket name required!"
  else
    local RESPONSE="$(aws s3api list-objects --bucket "$1" --query "Contents | length(@)" --no-paginate 2>&1)"
    if [[ *${RESPONSE}* == *"In function length(), invalid type for value: None, expected one of:"* ]]; then
      echo "0"
    else
      echo "${RESPONSE}"
    fi
  fi
}

function awsdecodeec2message {
  if [ "" == "$1" ]; then
    echo "Passing the encoded ec2 auth messageis required!"
  else
    aws sts decode-authorization-message --encoded-message "$1" | open -f
  fi
}



function awshelp {

MESSAGE=`cat <<HEREDOC_MESSAGE

References:
  https://github.com/toniblyx/my-arsenal-of-aws-security-tools

Aliases:
  awsacctalias - Show account aliases for current credentials
  awsgetcaller - Show current credentials
  awswhoami - Show current credentials
  awsunsetcreds - unset the AWS_SHARED_CREDENTIALS_FILE environment variabe
  awscheckcreds - Show what is set as the environment variable for AWS_SHARED_CREDENTIALS_FILE
  awsunsetprofile - unset the AWS_PROFILE environment variabe
  awscheckprofile - Show what is set as the environment variable for AWS_PROFILE
  awscheck - Show what is set as the environment variables matching AWS_*
  awscfnhelper - Alias to the cloudformation helper script found in ~/Documents/repos/scsarver/utility_scripts/cloudformation

Functions:
  awssetcreds - Sets the AWS_SHARED_CREDENTIALS_FILE environment variable
  awssetprofile - Sets the AWS_PROFILE environment variable
  awssetregion - Sets the AWS_REGION environment variable
  awsunset - unsets all known AWS_* environment variables.
  awsssmto - Finds a matching ec2 instance and starts an ssm session
  awsssminventory - Show ec2 instances data for instance that can use ssm.
  awsgetinstancedata - Extract the id, ami and Name Tag for ec2 instances matching the suppled value against the Name tag.
  awsacctnumberfromarn - Extracts the account number from an ARN (Amazon Resource Name)
  awsextractcreds - Extract a credentials file from the standard location into the current directory as [default]
  awss3countobjects - Returns a count of objects in the s3 bucket
  awsfindsecret - Finds an AWS Secret matching the supplied string.
  awslistcfn - Lists cloudformation stack names
  awsfindcfn - Finds a cloudformation stack name matched to the supplied string
  awsdecodeec2message - Calls the aws sts decode-authorization-message api and puts the content into a TextEdit window.

TODO:
  awscmd - function - pass a cli call but wrap with exception handling

HEREDOC_MESSAGE
`
echo "$MESSAGE"
}

function awsref {

MESSAGE=`cat <<HEREDOC_MESSAGE

  Training and Certification:
   - https://pages.awscloud.com/AWS-Traincert_Ramp-up_Guides.html

   JMESPATH - https://jmespath.org/tutorial.html
   Well Architected labs(need to be logged into an account) - https://wellarchitectedlabs.com

HEREDOC_MESSAGE
`
echo "$MESSAGE"
}
