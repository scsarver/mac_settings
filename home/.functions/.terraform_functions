# The tfdo function is used to encapsulate the command line parameters to include the correct tfvars files in the correct order based on established patterns matching:
# - ${github_repo}/iac/env/${github_repo_tolder} is where terraform is executed from
# - ${github_repo_path} is always prefixed with iac and looks like iac/${github_repo_tolder}
# - ${github_repo}/iac/env/${github_repo_tolder} has a backend.tfvars file
# - ${github_repo}/iac/env/${github_repo_tolder} optionally has a variables.tfvars
#
function tfdo {
  local -r tf_do_current_dir="${PWD##*/}"
  local releative_path="../../../${PWD##*/}"
  local -r tf_do_action=$1
  local tf_do_var_file="variables.tfvars"
  local tf_do_cmd_switch="var-file"
  local parent_slash_child="${PWD##*env/}"
  local parent_only="${parent_slash_child%/*}"
  local tf_timestamp="$(date +%Y.%m.%d-%H:%M:%S)"

  if [[ "$parent_only" == *prod* ]] || [[ "$parent_only" == *demo* ]]; then
    echo "============================================================"
    echo "WARNING you are executing tfdo against a production like environment using the following: "
    echo " "
    echo "  Account alias:          $(aws iam list-account-aliases | jq -r '.AccountAliases[0]')"
    echo "  Token caller identity:  $(aws sts get-caller-identity | jq -r '.Arn' ) "
    echo "  Environment:            $parent_only"
    echo "  Timestamp:              $tf_timestamp"
    echo "============================================================"

    read -p "Continue (y/n)?" choice
    case "$choice" in
      y|Y ) echo "yes";;
      n|N ) echo "no"; return;;
      * ) echo "invalid";;
    esac
  else
    echo "============================================================"
    echo "Executing tfdo against the following environment: "
    echo " "
    echo "  Account alias:          $(aws iam list-account-aliases | jq -r '.AccountAliases[0]')"
    echo "  Token caller identity:  $(aws sts get-caller-identity | jq -r '.Arn' ) "
    echo "  Environment:            $parent_only"
    echo "  Timestamp:              $tf_timestamp"
    echo "============================================================"
  fi

  if [ "init" == "$1" ]; then
    #rm -rf .terraform
    tf_do_var_file="backend.tfvars"
    tf_do_cmd_switch="backend-config"
  fi
  local base_var_file_cmd="-$tf_do_cmd_switch=../$tf_do_var_file"
  if [ "apply" == "$1" ] && [ "-aa" == "$2" ]; then
    local base_var_file_cmd="-auto-approve $base_var_file_cmd"
  fi
  local nested_var_file_cmd=""
  if [ -f "$tf_do_var_file" ]; then
    local nested_var_file_cmd="-$tf_do_cmd_switch=$tf_do_var_file"
    echo "tfdo - terraform $1 $base_var_file_cmd $nested_var_file_cmd $releative_path"
    terraform "$1" $base_var_file_cmd $nested_var_file_cmd $releative_path
  else
    echo "tfdo - terraform $1 $base_var_file_cmd $releative_path"
    terraform "$1" $base_var_file_cmd $releative_path
  fi
  echo "============================================================"
}


# Utility function to quickly shift between the base tolder and environment directories
function tfenv {
  if [ "" == "$1" ]; then
    echo "Environment parameter is missing!"
  else
    if [ -d "../env/$1" ] && [ -d "../env/$1/${PWD##*/}" ]; then
      cd "../env/$1/${PWD##*/}"
    else
      echo "The path: ../env/$1/${PWD##*/} does not exist!"
    fi
  fi
}

# Utility function to quickly shift between the base tolder and environment directories
function tfbase {
  if [ -d "../../../${PWD##*/}" ]; then
    cd "../../../${PWD##*/}"
  else
    echo "The path: ../env/iac/$1/${PWD##*/} does not exist!"
  fi
}

function tfunlock {
  local REMOTE_STATE_DYNAMODB_TABLE=`cat ../backend.tfvars | grep dynamodb_table | awk -F' ' '{print$3}' | sed 's/\(.*\)"/\1/' | sed 's/^"//'`
  local REMOTE_STATE_BUCKET=`cat ../backend.tfvars | grep bucket | awk -F' ' '{print$3}' | sed 's/\(.*\)"/\1/' | sed 's/^"//'`
  local REMOTE_STATE_REGION=`cat ../backend.tfvars | grep region | awk -F' ' '{print$3}' | sed 's/\(.*\)"/\1/' | sed 's/^"//'`
  local REMOTE_STATE_KEY=`cat backend.tfvars | grep key | awk -F' ' '{print$3}' | sed 's/\(.*\)"/\1/' | sed 's/^"//'`
  local DYNAMODB_DELETE_LOCK_PAYLOAD="{\"LockID\": {\"S\": \"$REMOTE_STATE_BUCKET/$REMOTE_STATE_KEY\"}}"
  # echo "aws dynamodb get-item --table-name $REMOTE_STATE_DYNAMODB_TABLE --key $DYNAMODB_DELETE_LOCK_PAYLOAD --region $REMOTE_STATE_REGION"
  aws dynamodb delete-item --table-name "$REMOTE_STATE_DYNAMODB_TABLE" --key "$DYNAMODB_DELETE_LOCK_PAYLOAD" --region "$REMOTE_STATE_REGION"
}


# This is the previous version of tfdo where we assume execution of terraform from within the tolder and varfiles are referenced from the tolder as a base.
function tfdo_old {
  local -r tf_do_current_dir="${PWD##*/}"
  local -r tf_do_action=$1
  # local tf_do_var_file="terraform.tfvars"
  local tf_do_var_file="variables.tfvars"
  local tf_do_cmd_switch="var-file"
  if [ "init" == "$1" ]; then
    rm -rf .terraform
    tf_do_var_file="backend.tfvars"
    tf_do_cmd_switch="backend-config"
  fi
  local base_var_file_cmd="-$tf_do_cmd_switch=../env/$2/$tf_do_var_file"
  if [ -f "../env/$2/$tf_do_current_dir/$tf_do_var_file" ]; then
    local nested_var_file_cmd="-$tf_do_cmd_switch=../env/$2/$tf_do_current_dir/$tf_do_var_file"
    base_var_file_cmd="$base_var_file_cmd $nested_var_file_cmd"
  fi

  if [ "import" == "$1" ]; then
    local missing_params='false'
    local message=''
    if [ "" == "$3" ]; then
      message="$message\nParameter 3: The ADDR specified is the address to import the resource to is required!\n"
      missing_params='true'
    fi
    if [ "" == "$4" ]; then
      message="$message\nParameter 4: The ID is a resource-specific ID to identify that resource being imported is required!\n"
      missing_params='true'
    fi
    if [ "true" == "$missing_params" ]; then
      printf '\n============================================================\n'
      printf "$message"
      printf '\n============================================================\n'
      return 1
    else
      base_var_file_cmd="$base_var_file_cmd $3 $4"
    fi
  fi
  echo "tfdo_old "$1" $base_var_file_cmd"
  terraform "$1" $base_var_file_cmd
}
