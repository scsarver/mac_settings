# Create a newly stubbed bash script file
function newsh {
  local SH_FILE="new.sh"
  echo "file: $1"
  if [ "" != "$1" ]; then
    SH_FILE="$1"
    #Consider checking for the file name!
    # which -a $SH_FILE
    # whereis $SH_FILE
    # locate $SH_FILE
  fi

  NEWSH=$(cat <<"HEREDOCNEWSH"
#!/usr/bin/env bash
#
# Created By: $(whoami)
# Created Date: $(date +%Y%m%d-%H%M%S)
#
# Purpose and References: See usage function defined below - ref: https://en.wikipedia.org/wiki/Usage_message
#
# Where you want the options to take effect, use set -o option-name or, in short form, set -option-abbrev, To disable an option within a script, use set +o option-name or set +option-abbrev: https://www.tldp.org/LDP/abs/html/options.html
set +x #xtrace
set +v #verbose
set -e #errexit
set -u #nounset
SCRIPTDIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
SCRIPTNAME="$(basename "$0")"
LOG_TO_FILE="false"
LOGFILE="$SCRIPTNAME-$(date +%Y%m%d-%H%M%S).log"
function log {
  if [ "true" == "$LOG_TO_FILE" ]; then
    if [ "" == "$(which tee)" ]; then
      echo "$1" && echo "$1">>"$LOGFILE"
    else
      echo "$1" | tee -a "$LOGFILE"
    fi
  else
    echo "$1"
  fi
}
if [ "true" == "$LOG_TO_FILE" ]; then
  touch "$LOGFILE"
fi
function usage {
USAGE=$(cat <<HEREDOCUSAGE
  Usage: $SCRIPTNAME Path:$SCRIPTDIR
HEREDOCUSAGE
  )
echo "$USAGE"
}

usage

HEREDOCNEWSH
)
  echo "$NEWSH">"$SH_FILE"
  chmod 740 "$SH_FILE"
  shellcheck "$SH_FILE"
}

# Used to pipe the man commands text into a pdf for easier viewing.
function manpdf() {
 man -t "${1}" | open -f -a /Applications/Preview.app/
}

# Function to quickly make a note file and open it up in the current directory.
function mknote {
  local NOTE_FILE="$(date '+%Y%m%d')-notes.txt"
  touch "$NOTE_FILE"
  open "$NOTE_FILE"
}

alias cdrepos="cd $REPOS_BASE_DIR"
alias cdsc="cd $REPOS_BASE_DIR/scsarver"
alias cdproto="cd $REPOS_BASE_DIR/prototype"

function cdiac {
    local CURRENT_START_PATH="$(pwd)"
    local CURRENT_PATH="${CURRENT_START_PATH##*[/]}"
    if [[ $CURRENT_START_PATH == *"iac"* ]]; then
      while [ "iac" != "$CURRENT_PATH" ]
      do
        cd ..
        CURRENT_PATH_TMP="$(pwd)"
        CURRENT_PATH="${CURRENT_PATH_TMP##*[/]}"
      done
    else
        echo "No iac directory in the current path: $CURRENT_START_PATH"
    fi
}

function comparethem {
  /Applications/Xcode.app/Contents/Developer/usr/bin/opendiff $1 $2
}



#https://stackoverflow.com/questions/352098/how-can-i-pretty-print-json-in-a-shell-script
prettyjson_s() {
    echo "$1" | python -m json.tool
}

prettyjson_f() {
    python -m json.tool "$1"
}

prettyjson_w() {
    curl "$1" | python -m json.tool
}

function filehelp {

MESSAGE=`cat <<HEREDOC_MESSAGE

aliases:
  alias cdrepos="cd $REPOS_BASE_DIR"
  alias cdsc="cd $REPOS_BASE_DIR/scsarver"
  alias cdproto="cd $REPOS_BASE_DIR/prototype"

functions:
  newsh - Creates a template for a new shell script if passed a name the script will get the passed in name.
  manpdf
  mknote -
  cdiac -
  comparethem - Invokes opendiff to compare files
  prettyjson_s
  prettyjson_f
  prettyjson_w

HEREDOC_MESSAGE
`
echo "$MESSAGE"

}
