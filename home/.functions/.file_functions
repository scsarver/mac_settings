# Create a newly stubbed bash script file
function newsh {
  local SH_FILE="new.sh"
  echo "file: $1"
  if [ "" != "$1" ]; then
    SH_FILE="$1"
    #Consider checking for the file name!
    # which -a $SH_FILE
    # whereis $SH_FILE
    # locate $SH_FILE
  fi

  NEWSH1=$(cat <<HEREDOCNEWSH
#!/usr/bin/env bash
#
# Created By: $(whoami)
# Created Date: $(date +%Y%m%d-%H%M%S)
HEREDOCNEWSH
)

  NEWSH2=$(cat <<'HEREDOCNEWSH'
#
# Purpose and References: See usage function defined below - ref: https://en.wikipedia.org/wiki/Usage_message
# Where you want the options to take effect, use set -o option-name or, in short form, set -option-abbrev, To disable an option within a script, use set +o option-name or set +option-abbrev: https://www.tldp.org/LDP/abs/html/options.html
set +x #xtrace
set +v #verbose
set -e #errexit
set -o pipefail # https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# set -u #nounset - This is off by default until the parameter parsing while block usage of $1 forcing an error can be figured out.
QUIET="false"
VERBOSE="false"
LOG_TO_FILE="false"
readonly SCRIPTDIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
readonly SCRIPTNAME="$(basename "$0")"
readonly LOGFILE="${SCRIPTNAME%.*}-$(date +%Y%m%d-%H%M%S).log"
function missing_arg { echo "Error: Argument for $1 is missing" >&2; exit 1; }
function unsupported_flag { echo "Error: Unsupported flag $1" >&2; exit 1; }
function usage {
cat <<HEREDOCUSAGE
  Usage: $SCRIPTNAME Path:$SCRIPTDIR
  Purpose:
    Update me!
  Flags:
    -v|--verbose [true|false - default false]- Used to increase the verbosity of output.
    -q|--quiet   [true|false - default false]- Used to turn off logging and output.
    -l|--log [true|false - default false]- Used to turn on logging output to a file with the naming pattern [${SCRIPTNAME%.*}-%Y%m%d-%H%M%S.log]
    -u|--usage - Used to display this usage documentation and exit.
HEREDOCUSAGE
}
# Consider enhancing with color logging some examples found here: https://github.com/docker/docker-bench-security/blob/master/output_lib.sh
function log {
  if [ "true" != "$QUIET" ]; then
    if [ "true" == "$LOG_TO_FILE" ]; then
      if [ "" == "$(which tee)" ]; then
        echo "$1" && echo "$1">>"$LOGFILE"
      else
        echo "$1" | tee -a "$LOGFILE"
      fi
    else
      echo "$1"
    fi
  fi
}
function vlog {
  if [ "true" == "$VERBOSE" ]; then
    log "$1"
  fi
}
if [ "true" == "$LOG_TO_FILE" ]; then
  touch "$LOGFILE" #This happens after flags are parsed
fi

readonly REQUIRED_SOFTWARE='aws jq yq'
for REQUIRED in $REQUIRED_SOFTWARE; do
  command -v "$REQUIRED" >/dev/null 2>&1 || { printf "%s command not found.\n" "$REQUIRED"; exit 1; }
done

HEREDOCNEWSH
)

  echo "$NEWSH1">"$SH_FILE"
  echo "$NEWSH2">>"$SH_FILE"

  # Note the case statement syntax causes problems when trying to put this text into a file using HEREDOC
  echo 'while (( "$#" )); do #Referenced: https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f'>>"$SH_FILE"
  echo 'case "$1" in'>>"$SH_FILE"
  echo '    -q|--quiet)export QUIET="true";shift;;'>>"$SH_FILE"
  echo '    -v|--verbose)'>>"$SH_FILE"
  echo '      export VERBOSE="true";shift;;'>>"$SH_FILE"
  echo '    -l|--log)'>>"$SH_FILE"
  echo '      export LOG_TO_FILE="true";shift;;'>>"$SH_FILE"
  echo '    -h|-u|--help|--usage )'>>"$SH_FILE"
  echo '      usage;exit;;'>>"$SH_FILE"
  echo '    # -ab|--boolean-flag)'>>"$SH_FILE"
  echo '    #   MY_FLAG=0;shift;;'>>"$SH_FILE"
  echo '    # -b|--flag-with-argument)'>>"$SH_FILE"
  echo '    #   if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then'>>"$SH_FILE"
  echo '    #     MY_FLAG_ARG=$2;shift 2;'>>"$SH_FILE"
  echo '    #   else'>>"$SH_FILE"
  echo '    #     missing_arg "$1"'>>"$SH_FILE"
  echo '    #   fi'>>"$SH_FILE"
  echo '    #   ;;'>>"$SH_FILE"
  echo '    -*|--*=) # Error on unsupported flags'>>"$SH_FILE"
  echo '      unsupported_flag "$1";;'>>"$SH_FILE"
  echo '    *) # preserve positional arguments'>>"$SH_FILE"
  echo '      PARAMS="$PARAMS $1";shift;;'>>"$SH_FILE"
  echo '  esac'>>"$SH_FILE"
  echo 'done'>>"$SH_FILE"
  echo 'if [ "true" == "$LOG_TO_FILE" ]; then'>>"$SH_FILE"
  echo '  touch "$LOGFILE" #This happens after flags are parsed'>>"$SH_FILE"
  echo 'fi'>>"$SH_FILE"

  chmod 740 "$SH_FILE"
  shellcheck -e SC2221,SC2222 "$SH_FILE" #Excluding rule SC2221 because I want to build a string of space seperated parameters which are not tied to a flag.
}

# Used to pipe the man commands text into a pdf for easier viewing.
function manpdf() {
 man -t "${1}" | open -f -a /Applications/Preview.app/
}

# Function to quickly make a note file and open it up in the current directory.
function mknote {
  local NOTE_FILE="$(date '+%Y%m%d')-notes.txt"
  touch "$NOTE_FILE"
  open "$NOTE_FILE"
}

alias cdrepos="cd $REPOS_BASE_DIR"
alias cdsc="cd $REPOS_BASE_DIR/scsarver"
alias cdproto="cd $REPOS_BASE_DIR/prototype"

function cdiac {
    local CURRENT_START_PATH="$(pwd)"
    local CURRENT_PATH="${CURRENT_START_PATH##*[/]}"
    if [[ $CURRENT_START_PATH == *"iac"* ]]; then
      while [ "iac" != "$CURRENT_PATH" ]
      do
        cd ..
        CURRENT_PATH_TMP="$(pwd)"
        CURRENT_PATH="${CURRENT_PATH_TMP##*[/]}"
      done
    else
        echo "No iac directory in the current path: $CURRENT_START_PATH"
    fi
}

function comparethem {
  /Applications/Xcode.app/Contents/Developer/usr/bin/opendiff $1 $2
}



#https://stackoverflow.com/questions/352098/how-can-i-pretty-print-json-in-a-shell-script
prettyjson_s() {
    echo "$1" | python -m json.tool
}

prettyjson_f() {
    python -m json.tool "$1"
}

prettyjson_w() {
    curl "$1" | python -m json.tool
}

function filehelp {

MESSAGE=`cat <<HEREDOC_MESSAGE

Diff tools (Not git specific):
  icdiff - side by side terminal diff tool
  Meld - GUI file and directory comparison tool

aliases:
  alias cdrepos="cd $REPOS_BASE_DIR"
  alias cdsc="cd $REPOS_BASE_DIR/scsarver"
  alias cdproto="cd $REPOS_BASE_DIR/prototype"

functions:
  newsh - Creates a template for a new shell script if passed a name the script will get the passed in name.
  manpdf
  mknote -
  cdiac -
  comparethem - Invokes opendiff to compare files
  prettyjson_s
  prettyjson_f
  prettyjson_w

HEREDOC_MESSAGE
`
echo "$MESSAGE"

}
