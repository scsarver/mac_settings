
#Move git functions here

alias gs='git status'
alias gb='git branch'
alias gbc="git branch --list  | grep '*' | cut -d ' ' -f2"
alias gp='git pull'
alias gbr='git branch -r'
alias glo='git log --oneline'
alias gls='git log --stat'
alias glp="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gdo='git diff --name-status origin/master master'
alias gdol='git diff master..origin/master'
alias gdu='git fetch origin;git diff @{upstream}'
alias gconf="source $REPOS_BASE_DIR/scsarver/mac_settings/setup/setup_git.sh"


function show_parent_branch {
  # https://stackoverflow.com/questions/3161204/find-the-parent-branch-of-a-git-branch
  # I do not tink this works correctly!!!!
  git show-branch | grep '*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'


  # git log --first-parent -n 5 --grep-reflog "$(git branch --list| grep '*' | cut -d ' ' -f2)" --walk-reflogs


}


function gcount {
  git rev-list --count
}

function gclean {
  git gc --prune=now --aggressive
}

function ginit {
  local NEW_REPO="$1"
  local GITHUB_BASE="github.com"
  local GIT_ORG="scsarver"
  if [ "" == "$NEW_REPO" ]; then
    echo "A repository name is required!"
  else
    if [ -d "$NEW_REPO" ]; then
      echo "A directory already exists with the name: [$NEW_REPO] in the current working directory: [$(pwd)]"
    else
      mkdir "$NEW_REPO"
      cd "$NEW_REPO"
      touch README.md
      echo "# $NEW_REPO">README.md
      git init
      git add README.md
      git commit -m "first commit"

      curl -u "$GIT_ORG" https://api.${GITHUB_BASE}/user/repos -d "{\"name\":\"${NEW_REPO}\"}"

      # git remote add origin git@${GITHUB_BASE}:${GIT_ORG}/${NEW_REPO}.git
      git remote add origin https://${GITHUB_BASE}/${GIT_ORG}/${NEW_REPO}.git
      git push -u origin master
  fi
 fi
}



function gd {
  local git_status_list_position_index="0"
  local count=0
  git_modified=($(git status | grep modified | awk '{print $2}'))
  git_modified_selected=''
  if [ "" != "$1" ]; then
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
      git_status_list_position_index="$1"
    else
      echo "Not a vailid option for selecting gitd: Showing diff for first change!!!!"
      echo " "
    fi
  fi
  echo "============================================================"
  echo " "
  echo " "
  echo "gitd - Show index and modified files in git project: ${PWD##*/}"
  for modified in "${git_modified[@]}"
  do
    echo "   $count - $modified"
    count=$((count+1))
  done
  echo " "
  echo "gitd - Showing git diff for file: ${git_modified[$git_status_list_position_index]}"
  echo " "
  echo "$(git -c color.ui=always diff ${git_modified[$git_status_list_position_index]})" | sed 's/^/    /'
  echo " "
  echo "============================================================"
}

function gpsh {
  local GIT_PUSH_OUT="$(git push -n 2>&1 && true )"
  local GIT_REMOTE="$(git remote)"
  local GIT_BRANCH="$(git branch --show-current)"
  local GIT_PUSH='git push'
  if [ "Everything up-to-date" == "$GIT_PUSH_OUT" ]; then
    echo "$GIT_PUSH_OUT"
  else
    while read -r line
    do
        if [[ "$line" == *'set-upstream'* ]]; then
          GIT_PUSH="$line"
        fi
    done <<< "$GIT_PUSH_OUT"
    echo "Do you want to push '$GIT_BRANCH' to '$GIT_REMOTE' - [$GIT_PUSH] ?"
    read PUSH_REMOTE_ANSWER
    if [ "y" == "$PUSH_REMOTE_ANSWER" ] ||
      [ "Y" == "$PUSH_REMOTE_ANSWER" ] ||
      [ "yes" == "$PUSH_REMOTE_ANSWER" ] ||
      [ "YES" == "$PUSH_REMOTE_ANSWER" ] ||
      [ "Yes" == "$PUSH_REMOTE_ANSWER" ]; then
      # TODO: Capture output and prompt for automatically opening to the pull request page!
      `$GIT_PUSH`
    else
      echo "Aborted!"
    fi
  fi
}

function gro {
  local FETCH_OR_PUSH="fetch"
  if [ "" != "$1" ] && [ "push" != "$1" ]; then
    echo "The FETCH_OR_PUSH parameter can only be 'push', the value passed in was: [$1] - to use the default of 'fetch' no parameter is required."
  else
    local GIT_REMOTE_URLS=("$(git remote -v 2>&1| grep "($FETCH_OR_PUSH)" | cut -f 2 | cut -d ' ' -f 1 )")
    for  GIT_REMOTE_URL in ${GIT_REMOTE_URLS[@]}
    do
      local GIT_REMOTE_TRMMED="${GIT_REMOTE_URL##*https://}"
      local GIT_ORG_TRIMMED="${GIT_REMOTE_TRMMED#*/}"
      local GIT_ORG="${GIT_ORG_TRIMMED%/*}"
      echo "$GIT_ORG"
    done
  fi
}

function grh {
  local FETCH_OR_PUSH="fetch"
  if [ "" != "$1" ] && [ "push" != "$1" ]; then
    echo "The FETCH_OR_PUSH parameter can only be 'push', the value passed in was: [$1] - to use the default of 'fetch' no parameter is required."
  else
    local GIT_REMOTE_URLS=("$(git remote -v 2>&1| grep "($FETCH_OR_PUSH)" | cut -f 2 | cut -d ' ' -f 1 )")
    for  GIT_REMOTE_URL in ${GIT_REMOTE_URLS[@]}
    do
      local GIT_REMOTE_TRMMED="${GIT_REMOTE_URL##*https://}"
      local GIT_ORG_TRIMMED="${GIT_REMOTE_TRMMED%/*}"
      local GIT_ORG="${GIT_ORG_TRIMMED%/*}"
      echo "${GIT_ORG}"
    done
  fi
}

function gcrh {
  if [ "" == "$2" ] -o [ "" == "$1" ]; then
    echo "Github organization and repository name are required!"
  else
    local GITHUB_BASE="github.com"
    local GITHUB_BASE="github.platform.vwfs.io"
    local GITHUB_ORG="$1"
    local GITHUB_REPO="$2"
    local SUFFIX=".git"
    local GITHUB_CON="https://${GITHUB_BASE}/${GITHUB_ORG}/${GITHUB_REPO}${SUFFIX}"
    git clone "${GITHUB_CON}"
  fi
}

function gcrs {
  if [ "" == "$2" ] -o [ "" == "$1" ]; then
    echo "Github organization and repository name are required!"
  else
    local GITHUB_BASE="github.com"
    local GITHUB_BASE="github.platform.vwfs.io"
    local GITHUB_ORG="$1"
    local SUFFIX=".git"
    local GITHUB_CON="git@${GITHUB_BASE}:${GITHUB_ORG}/${2}${SUFFIX}"
    git clone "${GITHUB_CON}"
  fi
}

function githelp {

MESSAGE=`cat <<HEREDOC_MESSAGE
Is there a git-merge --dry-run option?
  [https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option]

  -  Sort of: to avoid a fast-forward commit, but this will still modify your working copy

     git merge --no-commit --no-ff [your_branch_name]

     To undo the merge, even if it is a fast-forward merge
     git merge --abort

     To view the staged changes:
     git diff --cached

     You can also use git diff to compare between local and remote branches
     git diff master origin/master



 Links:
   Emojis in github markdown: https://gist.github.com/rxaviers/7360908
   Tips & tricks: https://opensource.com/article/20/10/advanced-git-tips

 Aliases:
   alias gs='git status'
   alias gb='git branch'
   alias gp='git pull'
   alias gbr='git branch -r'
   alias glo='git log --oneline'
   alias gls='git log --stat'
   alias glp="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
   alias gdo='git diff --name-status origin/master master'
   alias gdol='git diff master..origin/master'
   alias gdu='git fetch origin;git diff @{upstream}'

 Functions:
   function show_parent_branch -
   function gcount - counts the commits for the current repo
   function gclean - will clean up unreachable or "orphaned" Git objects in your repository
   function gd - git diff helper
   function gpsh - git push helper will fish out the set upstream command and prompt you to execute it.
   function gro - get the git organization from the git remotes command.
   function grh - get the git host from the git remotes command.
   function gcrh - git clone using https (TODO: Fix hardcoded github endpoint) with passed in repository name
   function gcrs - git clone using ssh (TODO: Fix hardcoded github endpoint) with passed in repository name

TODO
    Does git config pose an issue for tags and releases if the timezonee is not set?
       - https://stackoverflow.com/questions/7651644/git-timezone-and-timestamp-format

HEREDOC_MESSAGE
`
echo "$MESSAGE"

}
