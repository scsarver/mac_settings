
#Move git functions here

alias gs='git status'
alias gb='git branch'
alias gbc="git branch --list  | grep '*' | cut -d ' ' -f2"
alias gp='git pull'
alias gbr='git branch -r'
alias glo='git log --oneline'
alias gls='git log --stat'
alias glp="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gdo='git diff --name-status origin/master master'
alias gdol='git diff master..origin/master'
alias gdu='git fetch origin;git diff @{upstream}'


function show_parent_branch {
  # https://stackoverflow.com/questions/3161204/find-the-parent-branch-of-a-git-branch
  # I do not tink this works correctly!!!!
  git show-branch | grep '*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'


  # git log --first-parent -n 5 --grep-reflog "$(git branch --list| grep '*' | cut -d ' ' -f2)" --walk-reflogs


}

function gd {
  local git_status_list_position_index="0"
  local count=0
  git_modified=($(git status | grep modified | awk '{print $2}'))
  git_modified_selected=''
  if [ "" != "$1" ]; then
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
      git_status_list_position_index="$1"
    else
      echo "Not a vailid option for selecting gitd: Showing diff for first change!!!!"
      echo " "
    fi
  fi
  echo "============================================================"
  echo " "
  echo " "
  echo "gitd - Show index and modified files in git project: ${PWD##*/}"
  for modified in "${git_modified[@]}"
  do
    echo "   $count - $modified"
    count=$((count+1))
  done
  echo " "
  echo "gitd - Showing git diff for file: ${git_modified[$git_status_list_position_index]}"
  echo " "
  echo "$(git -c color.ui=always diff ${git_modified[$git_status_list_position_index]})" | sed 's/^/    /'
  echo " "
  echo "============================================================"
}

function gpsh {
  local GIT_PUSH_OUT="$(git push -n 2>&1 && true )"
  local GIT_REMOTE="$(git remote)"
  local GIT_BRANCH="$(git branch --show-current)"
  local GIT_PUSH='git push'
  if [ "Everything up-to-date" == "$GIT_PUSH_OUT" ]; then
    echo "$GIT_PUSH_OUT"
  else
    while read -r line
    do
        if [[ "$line" == *'set-upstream'* ]]; then
          GIT_PUSH="$line"
        fi
    done <<< "$GIT_PUSH_OUT"
    echo "Do you want to push '$GIT_BRANCH' to '$GIT_REMOTE' - [$GIT_PUSH] ?"
    read PUSH_REMOTE_ANSWER
    if [ "y" == "$PUSH_REMOTE_ANSWER" ] ||
      [ "Y" == "$PUSH_REMOTE_ANSWER" ] ||
      [ "yes" == "$PUSH_REMOTE_ANSWER" ] ||
      [ "YES" == "$PUSH_REMOTE_ANSWER" ] ||
      [ "Yes" == "$PUSH_REMOTE_ANSWER" ]; then
      # TODO: Capture output and prompt for automatically opening to the pull request page!
      `$GIT_PUSH`
    else
      echo "Aborted!"
    fi
  fi
}

function githelp {

MESSAGE=`cat <<HEREDOC_MESSAGE
Is there a git-merge --dry-run option?
  [https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option]

  -  Sort of: to avoid a fast-forward commit, but this will still modify your working copy

     git merge --no-commit --no-ff [your_branch_name]

     To undo the merge, even if it is a fast-forward merge
     git merge --abort

     To view the staged changes:
     git diff --cached

     You can also use git diff to compare between local and remote branches
     git diff master origin/master

 Links:
   Emojis in github markdown: https://gist.github.com/rxaviers/7360908

 Aliases:
   alias gs='git status'
   alias gb='git branch'
   alias gp='git pull'
   alias gbr='git branch -r'
   alias glo='git log --oneline'
   alias gls='git log --stat'
   alias glp="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
   alias gdo='git diff --name-status origin/master master'
   alias gdol='git diff master..origin/master'
   alias gdu='git fetch origin;git diff @{upstream}'

 Functions:
   function show_parent_branch -
   function gd - git diff helper
   function gpsh - git push helper will fish out the set upstream command and prompt you to execute it.

TODO
    Does git config pose an issue for tags and releases if the timezonee is not set?
       - https://stackoverflow.com/questions/7651644/git-timezone-and-timestamp-format

HEREDOC_MESSAGE
`
echo "$MESSAGE"

}
